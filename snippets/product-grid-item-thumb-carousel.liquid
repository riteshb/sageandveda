{% if template contains 'product' %}
{% assign grid_item_width = '' %}
{% endif %}
{% unless current_collection == blank %}
{% assign current_collection = collection %}
{% endunless %}
{% assign on_sale = false %}
{% assign sale_text = 'products.product.sale' | t %}
{% if product.compare_at_price > product.price %}
{% assign on_sale = true %}
{% endif %}
{% assign sold_out = true %}
{% assign sold_out_text = 'products.product.sold_out' | t %}
{% if product.available %}
{% assign sold_out = false %}
{% endif %} 
{%- assign current_variant = product.selected_or_first_available_variant -%}
{%- assign featured_image = current_variant.featured_image | default: product.featured_image -%}

{% assign productURL =  product.url | within: collection | append: '?view=quickview'  %}
{% assign productURL =  "/products/" | append: product.handle | append: '?view=quickview'  %}

<li class="{{ swiperSlideClass }} grid-item product-grid-item {% if sold_out %} sold-out{% endif %}{% if on_sale %} on-sale{% endif %} {{carousel}}" id="product-{{ product.id }}">
  <div class="products">
    <div class="product-container">  
      
      <div class="thumb-v-carousel slides {{ product.title | handle }}">
        <ul>
          {% for image in product.images   %}
          <li class="grid__item">
            <img src="{{ image.src | img_url: 'small' }}" alt="{{ image.alt | escape }}">    
          </li>
          {% endfor %}  
        </ul>         
      </div>
      
      <div class="grid-link product-group">            
        {% unless sold_out %}
        {% if on_sale and settings.collections_show_sale_circle %}
        <div class="featured-tag">
          <span class="badge badge--sale">          
            <span class="gift-tag badge__text{% if sale_text.size > 7 %} badge__text--small{% endif %}">{{ 'products.product.sale' | t }}</span>
          </span>
        </div>
        {% endif %}
        {% endunless %}
        {% if sold_out and settings.collections_show_sold_out_circle %}
        <span class="badge badge--sold-out">
          <span class="badge__text{% if sold_out_text.size > 9 %} badge__text--small{% endif %}">{{ 'products.product.sold_out' | t }}</span>
        </span>
        {% endif %} 
        
        {% comment %} Custom Product Badge {% endcomment %}
        {% if product.metafields.custom.badge_text != blank %}
        <div class="custom-product-badge" 
             style="{% if product.metafields.custom.badge_color != blank %}color: {{ product.metafields.custom.badge_color }};{% endif %}{% if product.metafields.custom.badge_background != blank %}background-color: {{ product.metafields.custom.badge_background }};{% endif %}">
          <span class="custom-badge-text">{{ product.metafields.custom.badge_text }}</span>
        </div>
        {% endif %}
        
        {% comment %} Custom Product Badge 2 {% endcomment %}
        {% if product.metafields.custom.badge_text_2 != blank %}
        <div class="custom-product-badge custom-product-badge-2" 
             style="{% if product.metafields.custom.badge_color_2 != blank %}color: {{ product.metafields.custom.badge_color_2 }};{% endif %}{% if product.metafields.custom.badge_background_2 != blank %}background-color: {{ product.metafields.custom.badge_background_2 }};{% endif %}">
          <span class="custom-badge-text">{{ product.metafields.custom.badge_text_2 }}</span>
        </div>
        {% endif %}
        
        {% if product.images.size > 1 %}
        <div class="middle-gallery_block {{ product.title | handle }}">            
          <div class="sliders">
            <div class="slides-show">
              <ul>
                {% for image in product.images %}
                <li class="grid__item">      
                  <a>
                    <img src="{{ image.src | img_url: '800x' }}" alt="{{ image.alt | escape }}">             
                  </a>
                </li>
                {% endfor %}
              </ul>
            </div>           
          </div>
        </div>      
        {% endif %}
      </div>

      <div class="product_right_tag  {% if on_sale %} offer_exist {% endif %}">
        {% if on_sale %}{% render 'offer-price', product: current_variant %} {% endif %}         
      </div>
      
      <div class="ImageWrapper">        
        <div class="product-button dt-sc_{{settings.product_button_style}} {{ settings.icon_aignment}}"> 


          {% if settings.product_button_style == 'icon' %}

          <div>
            {% if settings.enable_add_cart %}
            {% if product.available %}   
            {% assign productVariantSize = product.variants | size %}          
            {% if productVariantSize > 1 %}
            <a  title="{{ 'products.product.product_link' | t }}" href="{{ product.url }}">                      
              {% render 'icon-link' %}
            </a>
            {% else %}

            {% capture product_form_config %}
            {
            "money_format": {{ shop.money_format | json }},
            "enable_history": true,
            "currency_switcher_enabled": {{ settings.display_currency | json }},
            "sold_out": {{ "products.product.sold_out" | t | json }},
            "button": {{ 'products.product.add_to_cart' | t | json }},
            "unavailable": {{ 'products.product.unavailable' | t | json }}
            }
            {% endcapture %}

            {% form 'product', product, data-product-form:product_form_config %}                                  
            <input type="hidden" name="id" value="{{ product.variants[0].id }}" />  
            <button type="submit" name="add" id="AddToCart-{{product.id}}" class="dT_AddToCart btn">
              {% render 'icon-cart' %}
            </button>
            {% endform %}
            {% endif %}	
            {% endif %}
            {% endif %} 
          </div>
          {% endif %}          

          {% if settings.enable_compare %}  
          <div v-if="isInCompareList('{{ product.handle }}')">  
            <a href="/pages/compare" class="site-header__icon site-header__compare dT-icon-add-compare-loaded dT_compareListLink" :data-item-count="compareItemCount()" data-product_handle="{{ product.handle }}">
              {% render 'icon-compare' %}  
            </a>
          </div>
          <div v-else>
            <a href="/pages/compare" class="site-header__icon site-header__compare dT_compareListAddBtn" data-product_handle="{{ product.handle }}">
              {% render 'icon-compare' %}  
            </a>
          </div>  
          {% endif %} 

          {% if settings.enable_wishlist %}
          {%- render 'button-wishlist', product: product -%}
          {% endif %}

          {% if settings.enable_quick_view %}
          <div>
            <a data-url="{{productURL}}" 
               class="product-thumb-full-quick-view popup-product quick-view-btn" 
               href="{{ product.url | within: collection }}"
               data-product-id="{{ product.id }}" 
               data-slider-type="slider_gallery" 
               data-effect="mfp-move-from-top">{% render 'icon-search' %}</a>
          </div>
          {% endif %}  
        </div>
      </div>
      
    </div>
    <div class="product-detail {{ settings.item_aignment}}">
      {% include 'new-label' %}
      {% if settings.display_vendor and product.vendor != blank %}<p class="product-vendor"><span>{{ product.vendor }}</span></p>{% endif %}
      <h4  class="grid-link__title"><a href="{{ product.url | within: collection }}">{{ product.title }}</a></h4>
      
      <!-- Product Short Description -->
      {% if product.metafields.custom.product_short_description_content != blank %}
      <div class="product-short-description">
        <p>{{ product.metafields.custom.product_short_description_content | replace: ' +', ', ' | replace: ', ', ', ' | capitalize | replace: ', ', ', ' }}</p>
      </div>
      {% endif %}
      
      <!-- Variant Dropdown for Thumb Carousel -->
      {% unless product.has_only_default_variant %}
      <div class="carousel-variant-selector" data-product-id="{{ product.id }}">
        {% for option in product.options_with_values %}
        <div class="variant-option-wrapper">
          <label>{{ option.name }}</label>
          <div class="custom-variant-dropdown" data-index="option{{ forloop.index }}">
            <button type="button" class="variant-dropdown-button" data-product-id="{{ product.id }}">
              <span class="variant-selected-text">{{ option.selected_value | default: option.values.first }}</span>
              <span class="variant-dropdown-arrow">â–¼</span>
            </button>
            <div class="variant-dropdown-options">
              {% for value in option.values %}
              <div class="variant-option" data-value="{{ value | escape }}">
                {{ value | escape }}
              </div>
              {% endfor %}
            </div>
          </div>
        </div>
        {% endfor %}
      </div>
      {% endunless %}
      
      <!-- Quantity Selector for Thumb Carousel -->
      <div class="carousel-quantity-selector">
        <label class="quantity-label">{{ 'products.product.quantity' | t }}</label>
        <div class="product-item-caption-qty">
          <button class="btn-number btn-number-{{ product.id }}" type="button" data-type="minus" data-field="quant[1]">-</button>
          <input type="text" id="Quantity-{{ product.id }}" name="quantity" value="1" class="form-control input-number input-number-{{ product.id }} product-form__input" pattern="[0-9]*">
          <button class="btn-number btn-number-{{ product.id }}" type="button" data-type="plus" data-field="quant[1]">+</button>
        </div>
      </div>
      
      {% if settings.product_review %}
        <div class="jdgm-widget jdgm-preview-badge" data-id="{{ product.id }}">
          {{ product.metafields.judgeme.badge }}
        </div>
      {% endif %}             
      <div class="grid-link__meta">
        <!-- Price removed - now shown in Add to Cart button -->
      </div>    
      {% if settings.product_button_style == 'icon' %}
      {% include 'variant-tag-color' %}   
      {% endif %}

      {% if settings.truncated_description %}
      <div class="product_desc grid_list">{{ product.description | strip_html | truncatewords: settings.excerpt_count }}</div>
      {% endif %}


      {% if settings.product_button_style == 'button' %}
      <div class="dt-sc-btn-group">
        {% if product.available %}   
        {% assign productVariantSize = product.variants | size %}   

        {% capture product_form_config %}
        {
        "money_format": {{ shop.money_format | json }},
        "enable_history": true,
        "currency_switcher_enabled": {{ settings.display_currency | json }},
        "sold_out": {{ "products.product.sold_out" | t | json }},
        "button": {{ 'products.product.add_to_cart' | t | json }}, 
        "unavailable": {{ 'products.product.unavailable' | t | json }}
        }
        {% endcapture %}

        {% form 'product', product, data-product-form:product_form_config %}  
        {% include 'variant-tag-color' %}   

        <input type="hidden" name="id" class="variant-push" value="{{ product.variants[0].id }}" /> 

        <div class="dt-sc-btn-group">
          {% if settings.enable_add_cart %}       
          <button type="submit" name="add" id="AddToCart-{{product.id}}" class="dT_AddToCart dt-sc-btn">
            {% render 'icon-cart' %} <span class="dT_AddToCartText-{{ product.id }}">{{ 'products.product.add_to_cart' | t }} - {{ product.price | money }}</span>
          </button> 
          {% endif %}

        </div>

        {% endform %}         
        {% endif %}  
      </div>      
      {% endif %} 
      {% include 'deal-snippet' %}     
    </div>
  </div>  
  <script>  
    $(document).ready(function() {
      $('.middle-gallery_block.{{ product.title | handle }} .sliders .slides-show ul').not('.slick-initialized').slick({
        slidesToShow: 1,
        slidesToScroll: 1,
        arrows: false,
        fade: true,
        asNavFor: '.slides.{{ product.title | handle }} ul'
        });

      $('.slides.{{ product.title | handle }} ul').not('.slick-initialized').slick({
        slidesToShow: 4,
        slidesToScroll: 1,
        vertical: true,
        asNavFor: '.middle-gallery_block.{{ product.title | handle }} .sliders .slides-show ul',
        centerMode: true,
        focusOnSelect: true     
        });
    });

  </script>
  
  <!-- Product JSON Data for Variant Selection -->
  <script type="application/json" id="CarouselProductJson-{{ product.id }}" style="display:none">
    {{ product | json }}
  </script>
  
  <!-- Variant Selection JavaScript for Thumb Carousel -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const productId = {{ product.id }};
      const productJson = document.getElementById('CarouselProductJson-' + productId);
      
      if (productJson && productJson.textContent.trim()) {
      try {
        const jsonText = productJson.textContent.trim();
        if (!jsonText) {
          throw new Error('Empty JSON content');
        }
        console.log('JSON content for product ' + productId + ':', jsonText.substring(0, 100) + '...');
        const product = JSON.parse(jsonText);
          const variantDropdowns = document.querySelectorAll('.carousel-variant-selector[data-product-id="' + productId + '"] .custom-variant-dropdown');
          // Price elements removed - price now shown in Add to Cart button only
        
          if (variantDropdowns.length > 0) {
            // Initialize variant selection - mark first option as selected
            variantDropdowns.forEach(function(dropdown) {
              const firstOption = dropdown.querySelector('.variant-option');
              if (firstOption && !dropdown.querySelector('.variant-option.selected')) {
                firstOption.classList.add('selected');
              }
            });
            
            // Initialize variant selection
            updateVariantPrice(productId, product);
            
            // Initialize Add to Cart button text
            updateCarouselButtonPrice(productId, product);
            
            // Add event listeners to variant dropdowns
            variantDropdowns.forEach(function(dropdown) {
              const button = dropdown.querySelector('.variant-dropdown-button');
              const options = dropdown.querySelectorAll('.variant-option');
              
              // Button click to toggle dropdown
              button.addEventListener('click', function(e) {
                e.stopPropagation();
                toggleDropdown(dropdown);
              });
              
              // Option selection
              options.forEach(function(option) {
                option.addEventListener('click', function(e) {
                  e.stopPropagation();
                  
                  // Update selected text
                  const selectedText = dropdown.querySelector('.variant-selected-text');
                  selectedText.textContent = this.textContent;
                  
                  // Update selected state
                  options.forEach(function(opt) {
                    opt.classList.remove('selected');
                  });
                  this.classList.add('selected');
                  
                  // Close dropdown
                  closeDropdown(dropdown);
                  
                  // Update price
                  updateVariantPrice(productId, product);
                  
                  // Update Add to Cart button text
                  updateCarouselButtonPrice(productId, product);
                });
              });
            });
            
                      // Close dropdowns when clicking outside
                      document.addEventListener('click', function() {
                        variantDropdowns.forEach(function(dropdown) {
                          closeDropdown(dropdown);
                        });
                      });
                      
                      // Add quantity event listeners
                      const quantityInput = document.querySelector('#Quantity-' + productId);
                      if (quantityInput) {
                        quantityInput.addEventListener('input', function() {
                          updateCarouselButtonPrice(productId, product);
                        });
                        quantityInput.addEventListener('change', function() {
                          updateCarouselButtonPrice(productId, product);
                        });
                      }
                      
                      // Add quantity button event listeners
                      const quantityButtons = document.querySelectorAll('.btn-number-' + productId);
                      quantityButtons.forEach(function(button) {
                        button.addEventListener('click', function() {
                          const quantityInput = document.querySelector('#Quantity-' + productId);
                          if (quantityInput) {
                            let currentValue = parseInt(quantityInput.value) || 1;
                            const type = this.getAttribute('data-type');
                            
                            if (type === 'plus') {
                              currentValue++;
                            } else if (type === 'minus' && currentValue > 1) {
                              currentValue--;
                            }
                            
                            quantityInput.value = currentValue;
                            updateCarouselButtonPrice(productId, product);
                          }
                        });
                      });
          }
        } catch (error) {
          console.error('Error parsing product JSON for product ' + productId + ':', error);
                    // Fallback: still enable dropdown functionality without price updates
                    const variantDropdowns = document.querySelectorAll('.carousel-variant-selector[data-product-id="' + productId + '"] .custom-variant-dropdown');
                    if (variantDropdowns.length > 0) {
                      // Initialize variant selection - mark first option as selected
                      variantDropdowns.forEach(function(dropdown) {
                        const firstOption = dropdown.querySelector('.variant-option');
                        if (firstOption && !dropdown.querySelector('.variant-option.selected')) {
                          firstOption.classList.add('selected');
                        }
                      });
            variantDropdowns.forEach(function(dropdown) {
              const button = dropdown.querySelector('.variant-dropdown-button');
              const options = dropdown.querySelectorAll('.variant-option');
              
              // Button click to toggle dropdown
              button.addEventListener('click', function(e) {
                e.stopPropagation();
                toggleDropdown(dropdown);
              });
              
              // Option selection (without price updates)
              options.forEach(function(option) {
                option.addEventListener('click', function(e) {
                  e.stopPropagation();
                  
                  // Update selected text
                  const selectedText = dropdown.querySelector('.variant-selected-text');
                  selectedText.textContent = this.textContent;
                  
                  // Update selected state
                  options.forEach(function(opt) {
                    opt.classList.remove('selected');
                  });
                  this.classList.add('selected');
                  
                  // Close dropdown
                  closeDropdown(dropdown);
                  
                  // Note: Cannot update button price in fallback mode without product data
                });
              });
            });
          }
        }
      }
    });
    
    function toggleDropdown(dropdown) {
      const isOpen = dropdown.querySelector('.variant-dropdown-options').classList.contains('show');
      
      // Close all other dropdowns first
      document.querySelectorAll('.custom-variant-dropdown').forEach(function(otherDropdown) {
        if (otherDropdown !== dropdown) {
          closeDropdown(otherDropdown);
        }
      });
      
      if (isOpen) {
        closeDropdown(dropdown);
      } else {
        openDropdown(dropdown);
      }
    }
    
    function openDropdown(dropdown) {
      const options = dropdown.querySelector('.variant-dropdown-options');
      const button = dropdown.querySelector('.variant-dropdown-button');
      
      options.classList.add('show');
      button.classList.add('active');
    }
    
    function closeDropdown(dropdown) {
      const options = dropdown.querySelector('.variant-dropdown-options');
      const button = dropdown.querySelector('.variant-dropdown-button');
      
      options.classList.remove('show');
      button.classList.remove('active');
    }
    
    function updateVariantPrice(productId, product) {
      const variantDropdowns = document.querySelectorAll('.carousel-variant-selector[data-product-id="' + productId + '"] .custom-variant-dropdown');
      const selectedOptions = [];
      
      // Get selected values from all variant dropdowns
      variantDropdowns.forEach(function(dropdown) {
        const selectedOption = dropdown.querySelector('.variant-option.selected');
        if (selectedOption) {
          selectedOptions.push(selectedOption.getAttribute('data-value'));
        }
      });
      
      // Find matching variant
      const selectedVariant = product.variants.find(function(variant) {
        return variant.options.every(function(option, index) {
          return option === selectedOptions[index];
        });
      });
      
      if (selectedVariant) {
        // Update variant ID in hidden input (if exists)
        const variantInput = document.querySelector('#product-' + productId + ' .variant-push');
        if (variantInput) {
          variantInput.value = selectedVariant.id;
        }
        
        // Update availability
        const addToCartButton = document.querySelector('#product-' + productId + ' .dT_AddToCart');
        if (addToCartButton) {
          if (selectedVariant.available) {
            addToCartButton.disabled = false;
            addToCartButton.classList.remove('disabled');
          } else {
            addToCartButton.disabled = true;
            addToCartButton.classList.add('disabled');
          }
        }
      }
    }
    
              function updateCarouselButtonPrice(productId, product) {
                const variantDropdowns = document.querySelectorAll('.carousel-variant-selector[data-product-id="' + productId + '"] .custom-variant-dropdown');
                const selectedOptions = [];
                
                // Get selected values from all variant dropdowns
                variantDropdowns.forEach(function(dropdown) {
                  const selectedOption = dropdown.querySelector('.variant-option.selected');
                  if (selectedOption) {
                    selectedOptions.push(selectedOption.getAttribute('data-value'));
                  }
                });
                
                // Find matching variant
                const selectedVariant = product.variants.find(function(variant) {
                  return variant.options.every(function(option, index) {
                    return option === selectedOptions[index];
                  });
                });
                
                if (selectedVariant) {
                  const addToCartText = document.querySelector('.dT_AddToCartText-' + productId);
                  const quantityInput = document.querySelector('#Quantity-' + productId);
                  
                  if (addToCartText) {
                    let quantity = 1;
                    if (quantityInput && quantityInput.value) {
                      quantity = parseInt(quantityInput.value) || 1;
                    }
                    
                    const basePriceText = formatMoney(selectedVariant.price, product.money_format);
                    
                    if (quantity > 1) {
                      // Calculate total price
                      const totalPrice = selectedVariant.price * quantity;
                      const totalPriceText = formatMoney(totalPrice, product.money_format);
                      addToCartText.textContent = '{{ "products.product.add_to_cart" | t }} - ' + quantity + ' Ã— ' + basePriceText + ' = ' + totalPriceText;
                    } else {
                      addToCartText.textContent = '{{ "products.product.add_to_cart" | t }} - ' + basePriceText;
                    }
                  }
                }
              }
    
    function formatMoney(cents, format) {
      if (typeof cents === 'string') {
        cents = cents.replace('.', '');
      }
      var value = '';
      var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
      var formatString = (format || '{{ amount }}');
      
      function formatWithDelimiters(number, precision, thousands, decimal) {
        thousands = thousands || ',';
        decimal = decimal || '.';
        
        if (isNaN(number) || number == null) {
          return '$0.00';
        }
        
        number = (number / 100.0).toFixed(precision);
        
        var parts = number.split('.');
        var dollarsAmount = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
        var centsAmount = parts[1] ? (decimal + parts[1]) : '';
        
        return '$' + dollarsAmount + centsAmount;
      }
      
      var formatMatch = formatString.match(placeholderRegex);
      if (!formatMatch) {
        // Fallback to simple formatting
        return '$' + (cents / 100).toFixed(2);
      }
      
      switch (formatMatch[1]) {
        case 'amount':
          value = formatWithDelimiters(cents, 2);
          break;
        case 'amount_no_decimals':
          value = formatWithDelimiters(cents, 0);
          break;
        case 'amount_with_comma_separator':
          value = formatWithDelimiters(cents, 2, '.', ',');
          break;
        case 'amount_no_decimals_with_comma_separator':
          value = formatWithDelimiters(cents, 0, '.', ',');
          break;
        case 'amount_no_decimals_with_space_separator':
          value = formatWithDelimiters(cents, 0, ' ');
          break;
        case 'amount_with_apostrophe_separator':
          value = formatWithDelimiters(cents, 2, "'");
          break;
      }
      
      return formatString.replace(placeholderRegex, value);
    }
  </script>

</li>
