{% doc %}
  @prompt
    Create a variant picker block for product pages that displays product options as a dropdown or button selector. The picker should show the option name (like "Choose Your Oil") and allow customers to select from available variant values (like different oil types). When a customer selects a variant, it should update the product price and add-to-cart functionality accordingly. The design should be clean and match typical e-commerce product pages.
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-variant-picker-{{ ai_gen_id }} {
    margin: {{ block.settings.margin_top }}px 0 {{ block.settings.margin_bottom }}px;
  }

  .ai-variant-picker__option-{{ ai_gen_id }} {
    margin-bottom: 20px;
  }

  .ai-variant-picker__label-{{ ai_gen_id }} {
    display: block;
    font-size: {{ block.settings.label_size }}px;
    font-weight: 600;
    color: {{ block.settings.label_color }};
    margin-bottom: 10px;
  }

  .ai-variant-picker__selected-value-{{ ai_gen_id }} {
    font-weight: 400;
    color: {{ block.settings.value_color }};
    margin-left: 8px;
  }

  .ai-variant-picker__dropdown-{{ ai_gen_id }} {
    width: 100%;
    padding: 12px 16px;
    font-size: 16px;
    color: {{ block.settings.dropdown_text_color }};
    background-color: {{ block.settings.dropdown_bg_color }};
    border: {{ block.settings.dropdown_border_width }}px solid {{ block.settings.dropdown_border_color }};
    border-radius: {{ block.settings.dropdown_border_radius }}px;
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='8' viewBox='0 0 12 8'%3E%3Cpath fill='%23344323' d='M1.41 0L6 4.58 10.59 0 12 1.41l-6 6-6-6z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 16px center;
    padding-right: 40px;
  }

  .ai-variant-picker__dropdown-{{ ai_gen_id }}:hover {
    border-color: {{ block.settings.dropdown_hover_border_color }};
  }

  .ai-variant-picker__dropdown-{{ ai_gen_id }}:focus {
    outline: 2px solid {{ block.settings.dropdown_focus_color }};
    outline-offset: 2px;
    border-color: {{ block.settings.dropdown_focus_color }};
  }

  .ai-variant-picker__buttons-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }

  .ai-variant-picker__button-{{ ai_gen_id }} {
    padding: 10px 20px;
    font-size: 14px;
    color: {{ block.settings.button_text_color }};
    background-color: {{ block.settings.button_bg_color }};
    border: {{ block.settings.button_border_width }}px solid {{ block.settings.button_border_color }};
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 60px;
    text-align: center;
  }

  .ai-variant-picker__button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_bg_color }};
    color: {{ block.settings.button_hover_text_color }};
    border-color: {{ block.settings.button_hover_border_color }};
  }

  .ai-variant-picker__button-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.button_active_bg_color }};
    color: {{ block.settings.button_active_text_color }};
    border-color: {{ block.settings.button_active_border_color }};
  }

  .ai-variant-picker__button-{{ ai_gen_id }}:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  .ai-variant-picker__button-{{ ai_gen_id }}:disabled:hover {
    background-color: {{ block.settings.button_bg_color }};
    color: {{ block.settings.button_text_color }};
    border-color: {{ block.settings.button_border_color }};
  }

  @media screen and (max-width: 749px) {
    .ai-variant-picker__label-{{ ai_gen_id }} {
      font-size: {{ block.settings.label_size | times: 0.9 }}px;
    }

    .ai-variant-picker__dropdown-{{ ai_gen_id }} {
      font-size: 14px;
    }

    .ai-variant-picker__button-{{ ai_gen_id }} {
      font-size: 13px;
      padding: 8px 16px;
      min-width: 50px;
    }
  }
{% endstyle %}

<variant-picker-{{ ai_gen_id }}
  class="ai-variant-picker-{{ ai_gen_id }}"
  data-product-id="{{ product.id }}"
  data-section-id="{{ section.id }}"
  {{ block.shopify_attributes }}
>
  {% unless product.has_only_default_variant %}
    {% for option in product.options_with_values %}
      <div class="ai-variant-picker__option-{{ ai_gen_id }}" data-option-index="{{ forloop.index0 }}">
        <label class="ai-variant-picker__label-{{ ai_gen_id }}">
          {{ option.name }}
          {% if block.settings.show_selected_value %}
            <span class="ai-variant-picker__selected-value-{{ ai_gen_id }}" data-selected-value>
              {{ option.selected_value }}
            </span>
          {% endif %}
        </label>

        {% if block.settings.selector_style == 'dropdown' %}
          <select
            class="ai-variant-picker__dropdown-{{ ai_gen_id }}"
            data-option-select
            data-option-position="{{ option.position }}"
            aria-label="{{ option.name }}"
          >
            {% for value in option.values %}
              <option
                value="{{ value | escape }}"
                {% if option.selected_value == value %}selected{% endif %}
              >
                {{ value }}
              </option>
            {% endfor %}
          </select>
        {% else %}
          <div class="ai-variant-picker__buttons-{{ ai_gen_id }}" role="radiogroup" aria-label="{{ option.name }}">
            {% for value in option.values %}
              <button
                type="button"
                class="ai-variant-picker__button-{{ ai_gen_id }} {% if option.selected_value == value %}active{% endif %}"
                data-option-button
                data-option-position="{{ option.position }}"
                data-value="{{ value | escape }}"
                aria-label="{{ value }}"
                aria-pressed="{% if option.selected_value == value %}true{% else %}false{% endif %}"
              >
                {{ value }}
              </button>
            {% endfor %}
          </div>
        {% endif %}
      </div>
    {% endfor %}
  {% endunless %}
</variant-picker-{{ ai_gen_id }}>

<script>
  (function() {
    class VariantPicker{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.productId = this.dataset.productId;
        this.sectionId = this.dataset.sectionId;
        this.currentVariant = null;
      }

      connectedCallback() {
        this.initializeVariants();
        this.setupEventListeners();
        this.updateVariantAvailability();
      }

      initializeVariants() {
        const productData = document.querySelector(`#product-${this.productId}-data, [data-product-json]`);
        if (productData) {
          try {
            this.product = JSON.parse(productData.textContent);
          } catch (e) {
            console.error('Error parsing product data:', e);
          }
        }

        if (!this.product) {
          const scriptTag = document.querySelector('script[data-product-json]');
          if (scriptTag) {
            try {
              this.product = JSON.parse(scriptTag.textContent);
            } catch (e) {
              console.error('Error parsing product data from script:', e);
            }
          }
        }

        this.currentVariant = this.product?.selected_or_first_available_variant || this.product?.variants?.[0];
      }

      setupEventListeners() {
        const dropdowns = this.querySelectorAll('[data-option-select]');
        dropdowns.forEach(dropdown => {
          dropdown.addEventListener('change', (e) => this.handleOptionChange(e));
        });

        const buttons = this.querySelectorAll('[data-option-button]');
        buttons.forEach(button => {
          button.addEventListener('click', (e) => this.handleButtonClick(e));
        });
      }

      handleOptionChange(event) {
        const select = event.target;
        const position = select.dataset.optionPosition;
        const value = select.value;

        this.updateSelectedValue(position, value);
        this.updateVariant();
      }

      handleButtonClick(event) {
        const button = event.target;
        const position = button.dataset.optionPosition;
        const value = button.dataset.value;

        const container = button.closest('[data-option-index]');
        const buttons = container.querySelectorAll('[data-option-button]');
        buttons.forEach(btn => {
          btn.classList.remove('active');
          btn.setAttribute('aria-pressed', 'false');
        });

        button.classList.add('active');
        button.setAttribute('aria-pressed', 'true');

        this.updateSelectedValue(position, value);
        this.updateVariant();
      }

      updateSelectedValue(position, value) {
        const optionIndex = parseInt(position) - 1;
        const optionContainer = this.querySelector(`[data-option-index="${optionIndex}"]`);
        const selectedValueSpan = optionContainer?.querySelector('[data-selected-value]');
        
        if (selectedValueSpan) {
          selectedValueSpan.textContent = value;
        }
      }

      updateVariant() {
        const selectedOptions = this.getSelectedOptions();
        const variant = this.product.variants.find(v => {
          return selectedOptions.every((option, index) => {
            return v.options[index] === option;
          });
        });

        if (variant) {
          this.currentVariant = variant;
          this.updateURL(variant);
          this.updatePrice(variant);
          this.updateAddToCart(variant);
          this.updateVariantAvailability();
          this.dispatchVariantChangeEvent(variant);
        }
      }

      getSelectedOptions() {
        const options = [];
        const dropdowns = this.querySelectorAll('[data-option-select]');
        const buttonGroups = this.querySelectorAll('[data-option-index]');

        if (dropdowns.length > 0) {
          dropdowns.forEach(dropdown => {
            options.push(dropdown.value);
          });
        } else {
          buttonGroups.forEach(group => {
            const activeButton = group.querySelector('[data-option-button].active');
            if (activeButton) {
              options.push(activeButton.dataset.value);
            }
          });
        }

        return options;
      }

      updateURL(variant) {
        if (!variant) return;
        const url = new URL(window.location.href);
        url.searchParams.set('variant', variant.id);
        window.history.replaceState({}, '', url);
      }

      updatePrice(variant) {
        if (!variant) return;

        const priceElements = document.querySelectorAll(`[data-product-price="${this.productId}"]`);
        priceElements.forEach(element => {
          if (variant.compare_at_price && variant.compare_at_price > variant.price) {
            element.innerHTML = `
              <span class="price-item price-item--sale">
                ${this.formatMoney(variant.price)}
              </span>
              <span class="price-item price-item--regular">
                ${this.formatMoney(variant.compare_at_price)}
              </span>
            `;
          } else {
            element.innerHTML = `
              <span class="price-item">
                ${this.formatMoney(variant.price)}
              </span>
            `;
          }
        });
      }

      updateAddToCart(variant) {
        if (!variant) return;

        const addToCartButtons = document.querySelectorAll(`[data-product-form="${this.productId}"] button[type="submit"]`);
        const variantIdInputs = document.querySelectorAll(`[data-product-form="${this.productId}"] input[name="id"]`);

        variantIdInputs.forEach(input => {
          input.value = variant.id;
        });

        addToCartButtons.forEach(button => {
          if (variant.available) {
            button.disabled = false;
            button.textContent = button.dataset.availableText || 'Add to cart';
          } else {
            button.disabled = true;
            button.textContent = button.dataset.unavailableText || 'Sold out';
          }
        });
      }

      updateVariantAvailability() {
        if (!this.product) return;

        const selectedOptions = this.getSelectedOptions();
        
        this.querySelectorAll('[data-option-button]').forEach(button => {
          const position = parseInt(button.dataset.optionPosition) - 1;
          const value = button.dataset.value;
          
          const testOptions = [...selectedOptions];
          testOptions[position] = value;
          
          const matchingVariant = this.product.variants.find(v => {
            return testOptions.every((option, index) => {
              return v.options[index] === option;
            });
          });
          
          if (matchingVariant && !matchingVariant.available) {
            button.disabled = true;
          } else {
            button.disabled = false;
          }
        });
      }

      formatMoney(cents) {
        const amount = cents / 100;
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD'
        }).format(amount);
      }

      dispatchVariantChangeEvent(variant) {
        this.dispatchEvent(new CustomEvent('variant-change', {
          detail: { variant },
          bubbles: true
        }));
      }
    }

    customElements.define('variant-picker-{{ ai_gen_id }}', VariantPicker{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Variant picker",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "selector_style",
      "label": "Selector style",
      "options": [
        {
          "value": "dropdown",
          "label": "Dropdown"
        },
        {
          "value": "buttons",
          "label": "Buttons"
        }
      ],
      "default": "buttons"
    },
    {
      "type": "checkbox",
      "id": "show_selected_value",
      "label": "Show selected value in label",
      "default": true
    },
    {
      "type": "range",
      "id": "margin_top",
      "min": 0,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Margin top",
      "default": 20
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "min": 0,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Margin bottom",
      "default": 20
    },
    {
      "type": "header",
      "content": "Label"
    },
    {
      "type": "range",
      "id": "label_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Label size",
      "default": 16
    },
    {
      "type": "color",
      "id": "label_color",
      "label": "Label color",
      "default": "#344323"
    },
    {
      "type": "color",
      "id": "value_color",
      "label": "Selected value color",
      "default": "#85321a"
    },
    {
      "type": "header",
      "content": "Dropdown style"
    },
    {
      "type": "color",
      "id": "dropdown_bg_color",
      "label": "Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "dropdown_text_color",
      "label": "Text color",
      "default": "#344323"
    },
    {
      "type": "color",
      "id": "dropdown_border_color",
      "label": "Border color",
      "default": "#e6dfd6"
    },
    {
      "type": "color",
      "id": "dropdown_hover_border_color",
      "label": "Hover border color",
      "default": "#b2937e"
    },
    {
      "type": "color",
      "id": "dropdown_focus_color",
      "label": "Focus color",
      "default": "#85321a"
    },
    {
      "type": "range",
      "id": "dropdown_border_width",
      "min": 0,
      "max": 5,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "range",
      "id": "dropdown_border_radius",
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Border radius",
      "default": 5
    },
    {
      "type": "header",
      "content": "Button style"
    },
    {
      "type": "color",
      "id": "button_bg_color",
      "label": "Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Text color",
      "default": "#344323"
    },
    {
      "type": "color",
      "id": "button_border_color",
      "label": "Border color",
      "default": "#e6dfd6"
    },
    {
      "type": "color",
      "id": "button_hover_bg_color",
      "label": "Hover background",
      "default": "#f3eee7"
    },
    {
      "type": "color",
      "id": "button_hover_text_color",
      "label": "Hover text color",
      "default": "#344323"
    },
    {
      "type": "color",
      "id": "button_hover_border_color",
      "label": "Hover border color",
      "default": "#b2937e"
    },
    {
      "type": "color",
      "id": "button_active_bg_color",
      "label": "Active background",
      "default": "#b2937e"
    },
    {
      "type": "color",
      "id": "button_active_text_color",
      "label": "Active text color",
      "default": "#faf7f3"
    },
    {
      "type": "color",
      "id": "button_active_border_color",
      "label": "Active border color",
      "default": "#b2937e"
    },
    {
      "type": "range",
      "id": "button_border_width",
      "min": 0,
      "max": 5,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Border radius",
      "default": 5
    }
  ],
  "presets": [
    {
      "name": "Variant picker"
    }
  ]
}
{% endschema %}
